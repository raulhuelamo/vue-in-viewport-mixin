!function (t, e) { "object" == typeof exports && "object" == typeof module ? module.exports = e(require("scrollmonitor")) : "function" == typeof define && define.amd ? define(["scrollmonitor"], e) : "object" == typeof exports ? exports["vue-in-viewport-mixin"] = e(require("scrollmonitor")) : t["vue-in-viewport-mixin"] = e(t.scrollmonitor) }(this, function (i) { return function (i) { var o = {}; function n(t) { if (o[t]) return o[t].exports; var e = o[t] = { exports: {}, id: t, loaded: !1 }; return i[t].call(e.exports, e, e.exports, n), e.loaded = !0, e.exports } return n.m = i, n.c = o, n.p = "", n(0) }([function (t, e, i) { var o; o = i(1), t.exports = { props: { scrollElement: { type: [HTMLElement, String], default: "viewport" }, inViewportActive: { type: Boolean, default: !0 }, inViewportOnce: { type: Boolean, default: !1 }, inViewportOffset: { type: Number, default: 0 }, inViewportOffsetTop: { type: Number, default: null }, inViewportOffsetBottom: { type: Number, default: null } }, data: function () { return { scrollMonitor: null, inViewport: { now: null, fully: null, above: null, below: null, listening: !1 } } }, computed: { inViewportOffsetTopComputed: function () { var t; return null != (t = this.inViewportOffsetTop) ? t : this.inViewportOffset }, inViewportOffsetBottomComputed: function () { var t; return null != (t = this.inViewportOffsetBottom) ? t : this.inViewportOffset }, inViewportOffsetComputed: function () { return { top: this.inViewportOffsetTopComputed, bottom: this.inViewportOffsetBottomComputed } } }, mounted: function () { return this.$nextTick(this.inViewportInit) }, destroyed: function () { return this.removeInViewportHandlers() }, watch: { inViewportActive: function (t) { return t ? this.addInViewportHandlers() : this.removeInViewportHandlers() }, inViewportOffsetComputed: { deep: !0, handler: function () { return this.removeInViewportHandlers(), this.inViewportInit() } }, scrollElement: "inViewportReinit" }, methods: { inViewportReinit: function () { if (this.inViewportActive) return this.removeInViewportHandlers(), this.inViewportInit() }, inViewportInit: function () { if (this.inViewportActive) return this.addInViewportHandlers() }, addInViewportHandlers: function () { if (!this.inViewport.listening) { if (this.inViewport.listening = !0, this.scrollMonitor = o, this.scrollElement instanceof HTMLElement) { var t = o.createContainer(this.scrollElement); this.scrollMonitorWatcher = t.create(this.$el, this.inViewportOffsetComputed) } else this.scrollMonitorWatcher = o.create(this.$el, this.inViewportOffsetComputed); return this.scrollMonitorWatcher.on("stateChange", this.updateInViewport), this.updateInViewport() } }, removeInViewportHandlers: function () { if (this.inViewport.listening) return this.inViewport.listening = !1, this.scrollMonitorWatcher && this.scrollMonitorWatcher.destroy(), delete this.scrollMonitorWatcher }, updateInViewport: function () { if (this.inViewport.now = this.scrollMonitorWatcher.isInViewport, this.inViewport.fully = this.scrollMonitorWatcher.isFullyInViewport, this.inViewport.above = this.scrollMonitorWatcher.isAboveViewport, this.inViewport.below = this.scrollMonitorWatcher.isBelowViewport, this.inViewportOnce && this.inViewport.now) return this.removeInViewportHandlers() } } } }, function (t, e) { t.exports = i }]) });